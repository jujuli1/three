import {
  GLTFLoader
} from "./chunk-5QB3JEAA.js";
import {
  TextureLoader
} from "./chunk-IIRB6Q4W.js";

// node_modules/gltfloader/index.js
var loaderGlb = new GLTFLoader();
var loaderTexture = new TextureLoader();
var gltfloader_default = {
  loadGeometry: function loadGeometry(path) {
    return new Promise((resolve, reject) => {
      loaderGlb.load(
        path,
        function(gltf) {
          const geometries = gltf.scene.children.filter((child) => child.type === "Mesh").map((mesh) => mesh.geometry);
          if (geometries.length > 1) {
            resolve(geometries);
          } else {
            resolve(geometries[0]);
          }
        },
        void 0,
        function(e) {
          console.error(e);
          reject(e);
        }
      );
    });
  },
  loadObject: function loadObject(path, name) {
    return new Promise((resolve, reject) => {
      loaderGlb.load(
        path,
        function(gltf) {
          const mesh = gltf.scene.getObjectByName(name);
          mesh.animations = gltf.animations;
          resolve(mesh);
        },
        void 0,
        function(e) {
          console.error(e);
          reject(e);
        }
      );
    });
  },
  loadAnimations: function loadAnimations(path) {
    return new Promise((resolve, reject) => {
      loaderGlb.load(
        path,
        function(gltf) {
          resolve(gltf.animations);
        },
        void 0,
        function(e) {
          console.error(e);
          reject(e);
        }
      );
    });
  },
  loadScene: function loadScene(path) {
    return new Promise((resolve, reject) => {
      loaderGlb.load(
        path,
        function(gltf) {
          resolve(gltf.scene);
        },
        void 0,
        function(e) {
          console.error(e);
          reject(e);
        }
      );
    });
  },
  loadTexture: function loadTexture(path) {
    return new Promise((resolve, reject) => {
      loaderTexture.load(
        path,
        function(texture) {
          resolve(texture);
        },
        void 0,
        function(e) {
          console.error(e);
          reject(e);
        }
      );
    });
  }
};
export {
  gltfloader_default as default
};
//# sourceMappingURL=gltfloader.js.map
