{
  "version": 3,
  "sources": ["../../gltfloader/index.js"],
  "sourcesContent": ["import * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nconst loaderGlb = new GLTFLoader()\nconst loaderTexture = new THREE.TextureLoader();\n\nexport default {\n  loadGeometry: function loadGeometry(path) {\n    return new Promise((resolve, reject) => {\n      loaderGlb.load(path,\n        function(gltf) {\n          const geometries = gltf.scene.children\n            .filter(child => child.type === 'Mesh')\n            .map(mesh => mesh.geometry)\n          if (geometries.length > 1) {\n            resolve(geometries)\n          } else {\n            resolve(geometries[0])\n          }\n        }, undefined, function(e) {\n          console.error(e)\n          reject(e)\n        })\n    })\n  },\n  loadObject: function loadObject(path,name) {\n    return new Promise((resolve, reject) => {\n      loaderGlb.load(path,\n        function(gltf) {\n          const mesh = gltf.scene.getObjectByName(name)\n          mesh.animations = gltf.animations\n          resolve(mesh)\n        }, undefined, function(e) {\n          console.error(e)\n          reject(e)\n        })\n    })\n  },\n\n  loadAnimations: function loadAnimations(path) {\n    return new Promise((resolve, reject) => {\n      loaderGlb.load(path,\n        function(gltf) {\n          resolve(gltf.animations)\n        },\n        undefined, function(e) {\n          console.error(e)\n          reject(e)\n        })\n    })\n  },\n  loadScene: function loadScene(path) {\n    return new Promise((resolve, reject) => {\n      loaderGlb.load(path,\n        function(gltf) {\n          resolve(gltf.scene)\n        },\n        undefined, function(e) {\n          console.error(e)\n          reject(e)\n        })\n    })\n  },\n  loadTexture: function loadTexture(path) {\n    return new Promise((resolve, reject) => {\n      loaderTexture.load(path,\n        function(texture) {\n          resolve(texture)\n        },\n        undefined, function(e) {\n          console.error(e)\n          reject(e)\n        })\n    })\n  }\n}\n\n\n"],
  "mappings": ";;;;;;;;AAEA,IAAM,YAAY,IAAI,WAAW;AACjC,IAAM,gBAAgB,IAAU,cAAc;AAE9C,IAAO,qBAAQ;AAAA,EACb,cAAc,SAAS,aAAa,MAAM;AACxC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAU;AAAA,QAAK;AAAA,QACb,SAAS,MAAM;AACb,gBAAM,aAAa,KAAK,MAAM,SAC3B,OAAO,WAAS,MAAM,SAAS,MAAM,EACrC,IAAI,UAAQ,KAAK,QAAQ;AAC5B,cAAI,WAAW,SAAS,GAAG;AACzB,oBAAQ,UAAU;AAAA,UACpB,OAAO;AACL,oBAAQ,WAAW,CAAC,CAAC;AAAA,UACvB;AAAA,QACF;AAAA,QAAG;AAAA,QAAW,SAAS,GAAG;AACxB,kBAAQ,MAAM,CAAC;AACf,iBAAO,CAAC;AAAA,QACV;AAAA,MAAC;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EACA,YAAY,SAAS,WAAW,MAAK,MAAM;AACzC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAU;AAAA,QAAK;AAAA,QACb,SAAS,MAAM;AACb,gBAAM,OAAO,KAAK,MAAM,gBAAgB,IAAI;AAC5C,eAAK,aAAa,KAAK;AACvB,kBAAQ,IAAI;AAAA,QACd;AAAA,QAAG;AAAA,QAAW,SAAS,GAAG;AACxB,kBAAQ,MAAM,CAAC;AACf,iBAAO,CAAC;AAAA,QACV;AAAA,MAAC;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,SAAS,eAAe,MAAM;AAC5C,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAU;AAAA,QAAK;AAAA,QACb,SAAS,MAAM;AACb,kBAAQ,KAAK,UAAU;AAAA,QACzB;AAAA,QACA;AAAA,QAAW,SAAS,GAAG;AACrB,kBAAQ,MAAM,CAAC;AACf,iBAAO,CAAC;AAAA,QACV;AAAA,MAAC;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EACA,WAAW,SAAS,UAAU,MAAM;AAClC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAU;AAAA,QAAK;AAAA,QACb,SAAS,MAAM;AACb,kBAAQ,KAAK,KAAK;AAAA,QACpB;AAAA,QACA;AAAA,QAAW,SAAS,GAAG;AACrB,kBAAQ,MAAM,CAAC;AACf,iBAAO,CAAC;AAAA,QACV;AAAA,MAAC;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EACA,aAAa,SAAS,YAAY,MAAM;AACtC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,oBAAc;AAAA,QAAK;AAAA,QACjB,SAAS,SAAS;AAChB,kBAAQ,OAAO;AAAA,QACjB;AAAA,QACA;AAAA,QAAW,SAAS,GAAG;AACrB,kBAAQ,MAAM,CAAC;AACf,iBAAO,CAAC;AAAA,QACV;AAAA,MAAC;AAAA,IACL,CAAC;AAAA,EACH;AACF;",
  "names": []
}
